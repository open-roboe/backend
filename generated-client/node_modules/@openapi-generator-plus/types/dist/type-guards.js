"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isCodegenSchemaUsage = exports.isCodegenDiscriminatableSchema = exports.isCodegenDiscriminatorSchema = exports.isCodegenWrapperSchema = exports.isCodegenHierarchySchema = exports.isCodegenOneOfSchema = exports.isCodegenAnyOfSchema = exports.isCodegenAllOfSchema = exports.isCodegenCompositionSchema = exports.isCodegenScope = exports.isCodegenNamedSchema = exports.isCodegenObjectLikeSchema = exports.isCodegenInterfaceSchema = exports.isCodegenObjectSchema = exports.isCodegenEnumSchema = exports.isCodegenMapSchema = exports.isCodegenArraySchema = exports.isCodegenStringSchema = exports.isCodegenBooleanSchema = exports.isCodegenNumericSchema = void 0;
const types_1 = require("./types");
function isCodegenNumericSchema(schema) {
    return schema.schemaType === types_1.CodegenSchemaType.NUMBER || schema.schemaType == types_1.CodegenSchemaType.INTEGER;
}
exports.isCodegenNumericSchema = isCodegenNumericSchema;
function isCodegenBooleanSchema(schema) {
    return schema.schemaType === types_1.CodegenSchemaType.BOOLEAN;
}
exports.isCodegenBooleanSchema = isCodegenBooleanSchema;
function isCodegenStringSchema(schema) {
    return schema.schemaType === types_1.CodegenSchemaType.STRING || schema.schemaType == types_1.CodegenSchemaType.DATE ||
        schema.schemaType === types_1.CodegenSchemaType.DATETIME || schema.schemaType === types_1.CodegenSchemaType.TIME;
}
exports.isCodegenStringSchema = isCodegenStringSchema;
function isCodegenArraySchema(schema) {
    return schema.schemaType === types_1.CodegenSchemaType.ARRAY;
}
exports.isCodegenArraySchema = isCodegenArraySchema;
function isCodegenMapSchema(schema) {
    return schema.schemaType === types_1.CodegenSchemaType.MAP;
}
exports.isCodegenMapSchema = isCodegenMapSchema;
function isCodegenEnumSchema(schema) {
    return schema.schemaType === types_1.CodegenSchemaType.ENUM;
}
exports.isCodegenEnumSchema = isCodegenEnumSchema;
function isCodegenObjectSchema(schema) {
    return schema.schemaType === types_1.CodegenSchemaType.OBJECT;
}
exports.isCodegenObjectSchema = isCodegenObjectSchema;
function isCodegenInterfaceSchema(schema) {
    return schema.schemaType === types_1.CodegenSchemaType.INTERFACE;
}
exports.isCodegenInterfaceSchema = isCodegenInterfaceSchema;
function isCodegenObjectLikeSchema(schema) {
    return schema.schemaType === types_1.CodegenSchemaType.OBJECT || schema.schemaType === types_1.CodegenSchemaType.INTERFACE || schema.schemaType === types_1.CodegenSchemaType.HIERARCHY;
}
exports.isCodegenObjectLikeSchema = isCodegenObjectLikeSchema;
function isCodegenNamedSchema(schema) {
    return !!schema.name && !!schema.scopedName;
}
exports.isCodegenNamedSchema = isCodegenNamedSchema;
function isCodegenScope(schema) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return schema.scopedName;
}
exports.isCodegenScope = isCodegenScope;
function isCodegenCompositionSchema(schema) {
    return schema.schemaType === types_1.CodegenSchemaType.ALLOF ||
        schema.schemaType === types_1.CodegenSchemaType.ANYOF ||
        schema.schemaType === types_1.CodegenSchemaType.ONEOF;
}
exports.isCodegenCompositionSchema = isCodegenCompositionSchema;
function isCodegenAllOfSchema(schema) {
    return schema.schemaType === types_1.CodegenSchemaType.ALLOF;
}
exports.isCodegenAllOfSchema = isCodegenAllOfSchema;
function isCodegenAnyOfSchema(schema) {
    return schema.schemaType === types_1.CodegenSchemaType.ANYOF;
}
exports.isCodegenAnyOfSchema = isCodegenAnyOfSchema;
function isCodegenOneOfSchema(schema) {
    return schema.schemaType === types_1.CodegenSchemaType.ONEOF;
}
exports.isCodegenOneOfSchema = isCodegenOneOfSchema;
function isCodegenHierarchySchema(schema) {
    return schema.schemaType === types_1.CodegenSchemaType.HIERARCHY;
}
exports.isCodegenHierarchySchema = isCodegenHierarchySchema;
function isCodegenWrapperSchema(schema) {
    return schema.schemaType === types_1.CodegenSchemaType.WRAPPER;
}
exports.isCodegenWrapperSchema = isCodegenWrapperSchema;
function isCodegenDiscriminatorSchema(schema) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return schema.discriminator !== undefined;
}
exports.isCodegenDiscriminatorSchema = isCodegenDiscriminatorSchema;
function isCodegenDiscriminatableSchema(schema) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return schema.discriminatorValues !== undefined;
}
exports.isCodegenDiscriminatableSchema = isCodegenDiscriminatableSchema;
function isCodegenSchemaUsage(ob) {
    if (typeof ob !== 'object') {
        return false;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const anyOb = ob;
    if (typeof anyOb.schema !== 'object') {
        return false;
    }
    if (typeof anyOb.required !== 'boolean' || typeof anyOb.nullable !== 'boolean' || typeof anyOb.readOnly !== 'boolean'
        || typeof anyOb.writeOnly !== 'boolean' || typeof anyOb.deprecated !== 'boolean') {
        return false;
    }
    return true;
}
exports.isCodegenSchemaUsage = isCodegenSchemaUsage;
