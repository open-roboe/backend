"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodegenOneOfStrategy = exports.CodegenAnyOfStrategy = exports.CodegenAllOfStrategy = exports.HttpMethods = exports.CodegenSchemaPurpose = exports.CodegenSchemaType = exports.CodegenEncodingStyle = exports.CodegenContentEncodingType = exports.CodegenGeneratorType = exports.CodegenLogLevel = void 0;
var CodegenLogLevel;
(function (CodegenLogLevel) {
    CodegenLogLevel[CodegenLogLevel["INFO"] = 0] = "INFO";
    CodegenLogLevel[CodegenLogLevel["WARN"] = 1] = "WARN";
})(CodegenLogLevel = exports.CodegenLogLevel || (exports.CodegenLogLevel = {}));
var CodegenGeneratorType;
(function (CodegenGeneratorType) {
    CodegenGeneratorType["SERVER"] = "SERVER";
    CodegenGeneratorType["CLIENT"] = "CLIENT";
    CodegenGeneratorType["DOCUMENTATION"] = "DOCUMENTATION";
})(CodegenGeneratorType = exports.CodegenGeneratorType || (exports.CodegenGeneratorType = {}));
var CodegenContentEncodingType;
(function (CodegenContentEncodingType) {
    CodegenContentEncodingType["MULTIPART"] = "MULTIPART";
    CodegenContentEncodingType["WWW_FORM_URLENCODED"] = "WWW_FORM_URLENCODED";
})(CodegenContentEncodingType = exports.CodegenContentEncodingType || (exports.CodegenContentEncodingType = {}));
/**
 * Encoding for properties and parameters.
 * https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#style-values
 */
var CodegenEncodingStyle;
(function (CodegenEncodingStyle) {
    CodegenEncodingStyle["MATRIX"] = "matrix";
    CodegenEncodingStyle["LABEL"] = "label";
    CodegenEncodingStyle["FORM"] = "form";
    CodegenEncodingStyle["SIMPLE"] = "simple";
    CodegenEncodingStyle["SPACE_DELIMITED"] = "spaceDelimited";
    CodegenEncodingStyle["PIPE_DELIMITED"] = "pipeDelimited";
    CodegenEncodingStyle["DEEP_OBJECT"] = "deepObject";
})(CodegenEncodingStyle = exports.CodegenEncodingStyle || (exports.CodegenEncodingStyle = {}));
var CodegenSchemaType;
(function (CodegenSchemaType) {
    CodegenSchemaType["OBJECT"] = "OBJECT";
    CodegenSchemaType["INTERFACE"] = "INTERFACE";
    CodegenSchemaType["WRAPPER"] = "WRAPPER";
    CodegenSchemaType["ALLOF"] = "ALLOF";
    CodegenSchemaType["ANYOF"] = "ANYOF";
    CodegenSchemaType["ONEOF"] = "ONEOF";
    CodegenSchemaType["HIERARCHY"] = "HIERARCHY";
    CodegenSchemaType["MAP"] = "MAP";
    CodegenSchemaType["ARRAY"] = "ARRAY";
    CodegenSchemaType["BOOLEAN"] = "BOOLEAN";
    CodegenSchemaType["NUMBER"] = "NUMBER";
    CodegenSchemaType["INTEGER"] = "INTEGER";
    CodegenSchemaType["ENUM"] = "ENUM";
    CodegenSchemaType["STRING"] = "STRING";
    CodegenSchemaType["DATETIME"] = "DATETIME";
    CodegenSchemaType["DATE"] = "DATE";
    CodegenSchemaType["TIME"] = "TIME";
    CodegenSchemaType["BINARY"] = "BINARY";
})(CodegenSchemaType = exports.CodegenSchemaType || (exports.CodegenSchemaType = {}));
/**
 * Describes the purpose for which a schema is being used.
 */
var CodegenSchemaPurpose;
(function (CodegenSchemaPurpose) {
    /**
     * The schema is being used as an item in an array.
     */
    CodegenSchemaPurpose["ARRAY_ITEM"] = "ARRAY_ITEM";
    /**
     * The schema is being used as a value in a map.
     */
    CodegenSchemaPurpose["MAP_VALUE"] = "MAP_VALUE";
    /**
     * The schema is being used for no specific pupose other than being a schema.
     */
    CodegenSchemaPurpose["GENERAL"] = "GENERAL";
    /**
     * The schema is being used as a parameter.
     */
    CodegenSchemaPurpose["PARAMETER"] = "PARAMETER";
    /**
     * The schema is being used for a model property.
     */
    CodegenSchemaPurpose["PROPERTY"] = "PROPERTY";
    /**
     * The schema is being used for a request body.
     */
    CodegenSchemaPurpose["REQUEST_BODY"] = "REQUEST_BODY";
    /**
     * The schema is being used for a response.
     */
    CodegenSchemaPurpose["RESPONSE"] = "RESPONSE";
    CodegenSchemaPurpose["HEADER"] = "HEADER";
    /**
     * An interface extracted from an implementation.
     */
    CodegenSchemaPurpose["EXTRACTED_INTERFACE"] = "EXTRACTED_INTERFACE";
    /**
     * An abstract implementation extracted from an interface
     */
    CodegenSchemaPurpose["ABSTRACT_IMPLEMENTATION"] = "ABSTRACT_IMPLEMENTATION";
    /**
     * A non-abstract implementation extracted from an interface
     */
    CodegenSchemaPurpose["IMPLEMENTATION"] = "IMPLEMENTATION";
})(CodegenSchemaPurpose = exports.CodegenSchemaPurpose || (exports.CodegenSchemaPurpose = {}));
/**
 * The different HTTP methods supported by OpenAPI.
 * NB. The order of entries in the enum may be used for sorting, see compareHttpMethods
 */
var HttpMethods;
(function (HttpMethods) {
    HttpMethods["GET"] = "GET";
    HttpMethods["HEAD"] = "HEAD";
    HttpMethods["OPTIONS"] = "OPTIONS";
    HttpMethods["POST"] = "POST";
    HttpMethods["PUT"] = "PUT";
    HttpMethods["PATCH"] = "PATCH";
    HttpMethods["DELETE"] = "DELETE";
    HttpMethods["TRACE"] = "TRACE";
})(HttpMethods = exports.HttpMethods || (exports.HttpMethods = {}));
var CodegenAllOfStrategy;
(function (CodegenAllOfStrategy) {
    /** Leave the CodegenAllOfSchema in the result for the generator implementation to deal with */
    CodegenAllOfStrategy["NATIVE"] = "NATIVE";
    /** Convert the allOf structure to object schemas with relationships */
    CodegenAllOfStrategy["OBJECT"] = "OBJECT";
    /** Convert the allOf structure to object schemas with a hierarchy schema at its root */
    CodegenAllOfStrategy["HIERARCHY"] = "HIERARCHY";
})(CodegenAllOfStrategy = exports.CodegenAllOfStrategy || (exports.CodegenAllOfStrategy = {}));
var CodegenAnyOfStrategy;
(function (CodegenAnyOfStrategy) {
    /** Leave the CodegenAnyOfSchema in the result for the generator implementation to deal with */
    CodegenAnyOfStrategy["NATIVE"] = "NATIVE";
    /** Convert the anyOf structure to object schemas with relationships */
    CodegenAnyOfStrategy["OBJECT"] = "OBJECT";
})(CodegenAnyOfStrategy = exports.CodegenAnyOfStrategy || (exports.CodegenAnyOfStrategy = {}));
var CodegenOneOfStrategy;
(function (CodegenOneOfStrategy) {
    /** Leave the CodegenOneOfSchema in the result for the generator implementation to deal with */
    CodegenOneOfStrategy["NATIVE"] = "NATIVE";
    /** Convert the oneOf structure to interfaces schemas with relationships */
    CodegenOneOfStrategy["INTERFACE"] = "INTERFACE";
})(CodegenOneOfStrategy = exports.CodegenOneOfStrategy || (exports.CodegenOneOfStrategy = {}));
