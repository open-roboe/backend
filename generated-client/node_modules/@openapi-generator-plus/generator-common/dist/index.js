"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.apiBasePath = exports.commonGenerator = void 0;
const types_1 = require("@openapi-generator-plus/types");
const case_transforms_1 = require("./case-transforms");
__exportStar(require("./case-transforms"), exports);
__exportStar(require("./http-methods"), exports);
__exportStar(require("./utils"), exports);
__exportStar(require("./config"), exports);
const url_parse_1 = __importDefault(require("url-parse"));
const pluralize_1 = __importDefault(require("pluralize"));
function commonGenerator(config, context) {
    return {
        /** Create a default operation name for operations that lack an operationId */
        toOperationName: (path, method) => {
            /* Remove path variables from the path */
            const sanitisedPath = path.replace(/\{[^}]*\}/g, '');
            const combined = `${method.toLocaleLowerCase()}_${sanitisedPath}`;
            const sanitizedCombined = combined.replace(/[^a-zA-Z0-9]/g, '_').replace(/_+$/, '');
            return (0, case_transforms_1.camelCase)(sanitizedCombined);
        },
        toSchemaName: (name) => {
            return name;
        },
        toSuggestedSchemaName: (name, options) => {
            if (options.purpose === types_1.CodegenSchemaPurpose.ARRAY_ITEM || options.purpose === types_1.CodegenSchemaPurpose.MAP_VALUE) {
                return pluralize_1.default.singular(name);
            }
            else {
                return name;
            }
        },
        templateRootContext: () => {
            return {
                generatedDate: new Date().toISOString(),
                clientGenerator: context.generator().generatorType() === types_1.CodegenGeneratorType.CLIENT,
                serverGenerator: context.generator().generatorType() === types_1.CodegenGeneratorType.SERVER,
                documentationGenerator: context.generator().generatorType() === types_1.CodegenGeneratorType.DOCUMENTATION,
            };
        },
    };
}
exports.commonGenerator = commonGenerator;
function apiBasePath(servers) {
    if (!servers || !servers.length) {
        return '/';
    }
    const server = servers[0];
    const url = new url_parse_1.default(server.url);
    return url.pathname;
}
exports.apiBasePath = apiBasePath;
