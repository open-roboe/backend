export declare type IndexedType<K extends string, V> = Record<K, V>;
declare type IndexedObjectType<T> = Record<string, T>;
export declare function findEntry<T>(ob: IndexedObjectType<T>, predicate: (value: T) => unknown): [string, T] | undefined;
export declare function find<T>(ob: IndexedObjectType<T>, predicate: (value: T) => boolean | undefined): T | undefined;
export declare function filter<T>(ob: IndexedObjectType<T>, predicate: (value: T) => boolean | undefined): IndexedObjectType<T>;
export declare function isEmpty<T>(ob: IndexedObjectType<T>): boolean;
export declare function sortValues<T>(ob: IndexedObjectType<T>, compare: (a: T, b: T) => number): IndexedObjectType<T>;
export declare function iterable<T>(ob: IndexedObjectType<T>): Iterable<[string, T]>;
export declare function values<T>(ob: IndexedObjectType<T>): Iterable<T>;
export declare function remove<T>(ob: IndexedObjectType<T>, key: string): void;
export declare function create<T>(): IndexedObjectType<T>;
export declare function create<T>(entries: [string, T][]): IndexedObjectType<T>;
export declare function create<T>(source: IndexedObjectType<T>): IndexedObjectType<T>;
export declare function set<T, V extends T>(ob: IndexedObjectType<T>, key: string, value: V): void;
export declare function get<T>(ob: IndexedObjectType<T>, key: string): T | undefined;
export declare function has<T>(ob: IndexedObjectType<T>, key: string): boolean;
export declare function allKeys<T>(ob: IndexedObjectType<T>): string[];
export declare function allValues<T>(ob: IndexedObjectType<T>): T[];
export declare function size<T>(ob: IndexedObjectType<T>): number;
export declare function merge<T>(ob: IndexedObjectType<T>, other: IndexedObjectType<T>): IndexedObjectType<T>;
export declare function undefinedIfEmpty<T>(ob: IndexedObjectType<T> | undefined): IndexedObjectType<T> | undefined;
export declare function nullIfEmpty<T>(ob: IndexedObjectType<T> | null): IndexedObjectType<T> | null;
export {};
