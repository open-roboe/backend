export declare type IndexedType<K, V> = Map<K, V>;
export declare function findEntry<K, V>(map: Map<K, V>, predicate: (value: V) => unknown): [K, V] | undefined;
export declare function find<K, V>(map: Map<K, V>, predicate: (value: V) => boolean | undefined): V | undefined;
export declare function filter<K, V>(map: Map<K, V>, predicate: (value: V) => boolean | undefined): Map<K, V>;
export declare function isEmpty<K, V>(map: Map<K, V>): boolean;
export declare function sortValues<K, V>(map: Map<K, V>, compare: (a: V, b: V) => number): Map<K, V>;
export declare function iterable<K, V>(map: Map<K, V>): Iterable<[K, V]>;
export declare function values<K, V>(map: Map<K, V>): Iterable<V>;
export declare function remove<K, V>(map: Map<K, V>, key: K): void;
export declare function create<K, V>(): Map<K, V>;
export declare function create<K, V>(entries: [K, V][]): Map<K, V>;
export declare function create<K, V>(source: Map<K, V>): Map<K, V>;
export declare function set<K, V, O extends V>(map: Map<K, V>, key: K, value: O): void;
export declare function get<K, V>(map: Map<K, V>, key: K): V | undefined;
export declare function has<K, V>(map: Map<K, V>, key: K): boolean;
export declare function allKeys<K, V>(map: Map<K, V>): K[];
export declare function allValues<K, V>(map: Map<K, V>): V[];
export declare function size<K, V>(map: Map<K, V>): number;
export declare function merge<K, V>(map: Map<K, V>, other: Map<K, V>): Map<K, V>;
export declare function undefinedIfEmpty<K, V>(map: Map<K, V> | undefined): Map<K, V> | undefined;
export declare function nullIfEmpty<K, V>(map: Map<K, V> | null): Map<K, V> | null;
