"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.options = exports.packageToPath = void 0;
const types_1 = require("@openapi-generator-plus/types");
const path_1 = __importDefault(require("path"));
const handlebars_templates_1 = require("@openapi-generator-plus/handlebars-templates");
const java_jaxrs_generator_common_1 = __importStar(require("@openapi-generator-plus/java-jaxrs-generator-common"));
const generator_common_1 = require("@openapi-generator-plus/generator-common");
var java_jaxrs_generator_common_2 = require("@openapi-generator-plus/java-jaxrs-generator-common");
Object.defineProperty(exports, "packageToPath", { enumerable: true, get: function () { return java_jaxrs_generator_common_2.packageToPath; } });
function options(config, context) {
    const parentOptions = (0, java_jaxrs_generator_common_1.options)(config, context);
    const generatorOptions = Object.assign(Object.assign({}, parentOptions), { apiSpecPackage: (0, generator_common_1.configString)(config, 'apiSpecPackage', `${parentOptions.apiPackage}.spec`), apiSpiPackage: (0, generator_common_1.configString)(config, 'apiSpiPackage', `${parentOptions.apiPackage}.spi`), connectionTimeoutMillis: (0, generator_common_1.configNumber)(config, 'connectionTimeoutMillis', 30000), receiveTimeoutMillis: (0, generator_common_1.configNumber)(config, 'receiveTimeoutMillis', 60000) });
    return generatorOptions;
}
exports.options = options;
function createGenerator(config, context) {
    const myContext = Object.assign(Object.assign({}, context), { loadAdditionalTemplates: async (hbs) => {
            await (0, handlebars_templates_1.loadTemplates)(path_1.default.resolve(__dirname, '../templates'), hbs);
            if (context.loadAdditionalTemplates) {
                await context.loadAdditionalTemplates(hbs);
            }
        }, additionalWatchPaths: () => {
            const result = [path_1.default.resolve(__dirname, '../templates')];
            if (context.additionalWatchPaths) {
                result.push(...context.additionalWatchPaths());
            }
            return result;
        }, formUrlEncodedImplementation: () => new context.NativeType(`${generatorOptions.useJakarta ? 'jakarta' : 'javax'}.ws.rs.core.Form`) });
    const generatorOptions = options(config, myContext);
    myContext.additionalExportTemplates = async (outputPath, doc, hbs, rootContext) => {
        const relativeSourceOutputPath = generatorOptions.relativeSourceOutputPath;
        const apiPackagePath = (0, java_jaxrs_generator_common_1.packageToPath)(generatorOptions.apiPackage);
        for (const group of doc.groups) {
            const operations = group.operations;
            if (!operations.length) {
                continue;
            }
            await (0, handlebars_templates_1.emit)('api', path_1.default.join(outputPath, relativeSourceOutputPath, apiPackagePath, `${context.generator().toClassName(group.name)}Api.java`), Object.assign(Object.assign(Object.assign({}, rootContext), group), { operations }), true, hbs);
        }
        const apiImplPackagePath = (0, java_jaxrs_generator_common_1.packageToPath)(generatorOptions.apiImplPackage);
        for (const group of doc.groups) {
            const operations = group.operations;
            if (!operations.length) {
                continue;
            }
            await (0, handlebars_templates_1.emit)('apiImpl', path_1.default.join(outputPath, relativeSourceOutputPath, apiImplPackagePath, `${context.generator().toClassName(group.name)}ApiImpl.java`), Object.assign(Object.assign(Object.assign(Object.assign({}, rootContext), doc), group), { operations }), true, hbs);
        }
        await (0, handlebars_templates_1.emit)('ApiConstants', path_1.default.join(outputPath, relativeSourceOutputPath, apiPackagePath, 'ApiConstants.java'), Object.assign(Object.assign({}, rootContext), { servers: doc.servers, server: doc.servers && doc.servers.length ? doc.servers[0] : null }), true, hbs);
        await (0, handlebars_templates_1.emit)('ApiInvoker', path_1.default.join(outputPath, relativeSourceOutputPath, apiPackagePath, 'ApiInvoker.java'), Object.assign(Object.assign({}, rootContext), doc), true, hbs);
        await (0, handlebars_templates_1.emit)('ApiProviders', path_1.default.join(outputPath, relativeSourceOutputPath, apiPackagePath, 'ApiProviders.java'), Object.assign(Object.assign({}, rootContext), { servers: doc.servers, server: doc.servers && doc.servers.length ? doc.servers[0] : undefined }), true, hbs);
        const apiSpecPackagePath = (0, java_jaxrs_generator_common_1.packageToPath)(generatorOptions.apiSpecPackage);
        for (const group of doc.groups) {
            const operations = group.operations;
            if (!operations.length) {
                continue;
            }
            await (0, handlebars_templates_1.emit)('apiSpec', path_1.default.join(outputPath, relativeSourceOutputPath, apiSpecPackagePath, `${context.generator().toClassName(group.name)}ApiSpec.java`), Object.assign(Object.assign(Object.assign({}, rootContext), group), { operations }), true, hbs);
        }
        await (0, handlebars_templates_1.emit)('UnexpectedApiException', path_1.default.join(outputPath, relativeSourceOutputPath, apiPackagePath, 'UnexpectedApiException.java'), Object.assign({}, rootContext), true, hbs);
        await (0, handlebars_templates_1.emit)('UnexpectedResponseException', path_1.default.join(outputPath, relativeSourceOutputPath, apiPackagePath, 'UnexpectedResponseException.java'), Object.assign({}, rootContext), true, hbs);
        await (0, handlebars_templates_1.emit)('UnprocessableResponseException', path_1.default.join(outputPath, relativeSourceOutputPath, apiPackagePath, 'UnprocessableResponseException.java'), Object.assign({}, rootContext), true, hbs);
        await (0, handlebars_templates_1.emit)('UnexpectedTimeoutException', path_1.default.join(outputPath, relativeSourceOutputPath, apiPackagePath, 'UnexpectedTimeoutException.java'), Object.assign({}, rootContext), true, hbs);
        const apiSpiPackagePath = (0, java_jaxrs_generator_common_1.packageToPath)(generatorOptions.apiSpiPackage);
        await (0, handlebars_templates_1.emit)('spi/ApiAuthorizationProvider', path_1.default.join(outputPath, relativeSourceOutputPath, apiSpiPackagePath, 'ApiAuthorizationProvider.java'), Object.assign({}, rootContext), true, hbs);
        if (context.additionalExportTemplates) {
            context.additionalExportTemplates(outputPath, doc, hbs, rootContext);
        }
    };
    myContext.additionalCleanPathPatterns = () => {
        const relativeSourceOutputPath = generatorOptions.relativeSourceOutputPath;
        const apiSpecPackagePath = (0, java_jaxrs_generator_common_1.packageToPath)(generatorOptions.apiSpecPackage);
        const result = [
            path_1.default.join(relativeSourceOutputPath, apiSpecPackagePath, '*ApiSpec.java'),
        ];
        if (context.additionalCleanPathPatterns) {
            result.push(...context.additionalCleanPathPatterns());
        }
        return result;
    };
    const base = (0, java_jaxrs_generator_common_1.default)(config, myContext);
    return Object.assign(Object.assign({}, base), { templateRootContext: () => {
            return Object.assign(Object.assign(Object.assign({}, base.templateRootContext()), generatorOptions), { generatorClass: '@openapi-generator-plus/java-jaxrs-client-generator' });
        }, generatorType: () => types_1.CodegenGeneratorType.CLIENT });
}
exports.default = createGenerator;
