import { CodegenConfig, CodegenGeneratorContext, CodegenDocument, CodegenGenerator, CodegenNativeType } from '@openapi-generator-plus/types';
import { CodegenOptionsJava } from './types';
import Handlebars from 'handlebars';
export { CodegenOptionsJava } from './types';
/**
 * Turns a Java package name into a path
 * @param packageName Java package name
 */
export declare function packageToPath(packageName: string): string;
export interface JavaGeneratorContext extends CodegenGeneratorContext {
    loadAdditionalTemplates?: (hbs: typeof Handlebars) => Promise<void>;
    additionalWatchPaths?: () => string[];
    additionalExportTemplates?: (outputPath: string, doc: CodegenDocument, hbs: typeof Handlebars, rootContext: Record<string, unknown>) => Promise<void>;
    additionalCleanPathPatterns?: () => string[];
    /**
     * Override the class used to capture application/x-www-form-urlencoded messages.
     */
    formUrlEncodedImplementation?: () => CodegenNativeType;
}
export declare function options(config: CodegenConfig, context: JavaGeneratorContext): CodegenOptionsJava;
export default function createGenerator(config: CodegenConfig, context: JavaGeneratorContext): Omit<CodegenGenerator, 'generatorType'>;
