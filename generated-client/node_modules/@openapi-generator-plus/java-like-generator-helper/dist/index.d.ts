import { CodegenGenerator, CodegenConfig, CodegenGeneratorContext } from '@openapi-generator-plus/types';
/** Returns the string converted to a string that is safe as an identifier in java-like languages */
export declare function identifierSafe(value: string): string;
/**
 * Camel case and capitalize suitable for a class name. Doesn't change existing
 * capitalization in the value.
 * e.g. "FAQSection" remains "FAQSection", and "faqSection" will become "FaqSection"
 * @param value string to be turned into a class name
 */
export declare function classCamelCase(value: string): string;
export declare function identifierCamelCase(value: string): string;
export declare const enum ConstantStyle {
    allCapsSnake = "snake",
    allCaps = "allCaps",
    camelCase = "camelCase",
    pascalCase = "pascalCase"
}
export interface JavaLikeOptions {
    apiClassPrefix?: string;
    modelClassPrefix?: string;
    constantStyle: ConstantStyle;
}
export declare function options(config: CodegenConfig, context: JavaLikeContext): JavaLikeOptions;
export interface JavaLikeContext extends CodegenGeneratorContext {
    reservedWords?: () => string[];
    defaultConstantStyle: ConstantStyle;
}
export declare function javaLikeGenerator(config: CodegenConfig, context: JavaLikeContext): Pick<CodegenGenerator, 'toClassName' | 'toIdentifier' | 'toConstantName' | 'toSchemaName' | 'toSuggestedSchemaName' | 'toOperationGroupName'>;
