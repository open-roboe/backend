"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createCodegenDocument = exports.bundleCodegenInput = exports.createCodegenInput = exports.createCodegenState = exports.constructGenerator = exports.idx = exports.createGeneratorContext = void 0;
const process_1 = require("./process");
const swagger_parser_1 = __importDefault(require("@openapi-generator-plus/swagger-parser"));
const utils_1 = require("./utils");
const idx = __importStar(require("@openapi-generator-plus/indexed-type"));
const logging_1 = require("./logging");
var generators_1 = require("./generators");
Object.defineProperty(exports, "createGeneratorContext", { enumerable: true, get: function () { return generators_1.createGeneratorContext; } });
exports.idx = __importStar(require("@openapi-generator-plus/indexed-type"));
/**
 * Construct a CodegenGenerator from the given constructor.
 * @param generatorConstructor
 */
function constructGenerator(config, context, generatorConstructor) {
    const generator = generatorConstructor(config, context);
    context.setGenerator(generator);
    return generator;
}
exports.constructGenerator = constructGenerator;
function createCodegenState(generator) {
    return {
        generator,
    };
}
exports.createCodegenState = createCodegenState;
async function createCodegenInput(inputPath) {
    const parser = new swagger_parser_1.default();
    /* Parse the document _without_ resolving references, as we use the presence of a reference
       as important information in our parsing.
     */
    const root = await parser.parse(inputPath);
    /* Create the references resolver, including resolving external references */
    const $refs = await parser.resolve(inputPath, root, {});
    return {
        root,
        $refs,
    };
}
exports.createCodegenInput = createCodegenInput;
async function bundleCodegenInput(inputPath) {
    const parser = new swagger_parser_1.default();
    return await parser.bundle(inputPath);
}
exports.bundleCodegenInput = bundleCodegenInput;
/**
 * Return a CodegenDocument produced from the given CodegenState.
 * @param state
 */
function createCodegenDocument(input, state) {
    const internalState = Object.assign(Object.assign(Object.assign({}, state), input), { usedFullyQualifiedSchemaNames: {}, knownSchemas: new Map(), knownSchemasByRef: new Map(), reservedSchemaNames: {}, schemas: idx.create(), specVersion: (0, utils_1.toSpecVersion)(input.root), log: state.log || logging_1.defaultLog });
    return (0, process_1.processDocument)(internalState);
}
exports.createCodegenDocument = createCodegenDocument;
