"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createGeneratorContext = void 0;
const utils_1 = require("./utils");
const native_type_1 = require("./native-type");
const allOperationGroupingStrategies = __importStar(require("./operation-grouping"));
const idx = __importStar(require("@openapi-generator-plus/indexed-type"));
const logging_1 = require("./logging");
/**
 * A partial generator implementation that should be the base of all generators.
 * This enables the core to introduce new CodegenGenerator methods and add default
 * implementations here, if appropriate.
 */
const baseGenerator = function (config, context) {
    return {
        toEnumMemberName: (name) => context.generator().toConstantName(name),
        toIteratedSchemaName: (name, _, iteration) => `${name}${iteration + 1}`,
        checkAllOfInheritanceCompatibility: () => {
            return true;
        },
        checkPropertyCompatibility: (parentProp, childProp) => {
            if (parentProp.type !== childProp.type) {
                return false;
            }
            if (parentProp.format !== childProp.format) {
                return false;
            }
            if (parentProp.required && !childProp.required) {
                return false;
            }
            return true;
        },
    };
};
function createGeneratorContext(options) {
    let _generator;
    return Object.assign({ generator: () => {
            if (_generator) {
                return _generator;
            }
            throw new Error('CodegenGenerator not yet set');
        }, setGenerator: (generator) => {
            _generator = generator;
        }, baseGenerator, operationGroupingStrategies: allOperationGroupingStrategies, NativeType: native_type_1.CodegenNativeTypeImpl, TransformingNativeType: native_type_1.CodegenTransformingNativeTypeImpl, ComposingNativeType: native_type_1.CodegenComposingNativeTypeImpl, utils: {
            stringLiteralValueOptions: () => (0, utils_1.stringLiteralValueOptions)(_generator),
            values: idx.values,
        }, log: logging_1.defaultLog }, options);
}
exports.createGeneratorContext = createGeneratorContext;
