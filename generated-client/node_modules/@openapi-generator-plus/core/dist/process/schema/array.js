"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createArraySchema = exports.toCodegenArraySchema = void 0;
const types_1 = require("@openapi-generator-plus/types");
const index_1 = require("./index");
const vendor_extensions_1 = require("../vendor-extensions");
const utils_1 = require("./utils");
const naming_1 = require("./naming");
const external_docs_1 = require("../external-docs");
const utils_2 = require("../utils");
function toCodegenArraySchema(apiSchema, naming, suggestedItemModelName, suggestedItemModelScope, state) {
    if (apiSchema.type !== 'array') {
        throw new Error('Not an array schema');
    }
    if (!apiSchema.items) {
        throw new Error('items missing for schema type "array"');
    }
    const vendorExtensions = (0, vendor_extensions_1.toCodegenVendorExtensions)(apiSchema);
    /* Component properties are implicitly required as we don't expect to have `null` entries in the array. */
    const componentSchemaUsage = (0, index_1.toCodegenSchemaUsage)(apiSchema.items, state, {
        required: true,
        suggestedName: suggestedItemModelName,
        purpose: types_1.CodegenSchemaPurpose.ARRAY_ITEM,
        suggestedScope: suggestedItemModelScope,
    });
    const nativeType = state.generator.toNativeArrayType({
        type: apiSchema.type,
        format: apiSchema.format,
        schemaType: types_1.CodegenSchemaType.ARRAY,
        componentNativeType: componentSchemaUsage.nativeType,
        uniqueItems: apiSchema.uniqueItems,
        vendorExtensions,
    });
    const result = Object.assign(Object.assign(Object.assign(Object.assign({}, (0, naming_1.extractNaming)(naming)), { type: 'array', format: apiSchema.format || null, schemaType: types_1.CodegenSchemaType.ARRAY, component: componentSchemaUsage, nativeType }), (0, utils_1.extractCodegenSchemaCommon)(apiSchema, state)), { vendorExtensions, externalDocs: (0, external_docs_1.toCodegenExternalDocs)(apiSchema), maxItems: (0, utils_2.convertToNumber)(apiSchema.maxItems), minItems: (0, utils_2.convertToNumber)(apiSchema.minItems), uniqueItems: (0, utils_2.convertToBoolean)(apiSchema.uniqueItems, null) });
    return result;
}
exports.toCodegenArraySchema = toCodegenArraySchema;
/**
 * Create a new schema of an array type with the given name, in the given scope, and add it to that scope.
 * @param scope the scope in which to create the object, or `null` to create in the global scope
 * @param state
 * @returns
 */
function createArraySchema(component, state) {
    const nativeType = state.generator.toNativeArrayType({
        type: 'array',
        schemaType: types_1.CodegenSchemaType.ARRAY,
        vendorExtensions: null,
        componentNativeType: component.nativeType,
    });
    const schema = {
        name: null,
        serializedName: null,
        scopedName: null,
        originalName: null,
        anonymous: false,
        type: 'array',
        format: null,
        schemaType: types_1.CodegenSchemaType.ARRAY,
        description: null,
        title: null,
        vendorExtensions: null,
        externalDocs: null,
        nullable: false,
        readOnly: false,
        writeOnly: false,
        deprecated: false,
        nativeType,
        component,
        maxItems: null,
        minItems: null,
        uniqueItems: null,
    };
    return schema;
}
exports.createArraySchema = createArraySchema;
