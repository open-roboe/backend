"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toCodegenMapSchema = void 0;
const types_1 = require("@openapi-generator-plus/types");
const index_1 = require("./index");
const vendor_extensions_1 = require("../vendor-extensions");
const utils_1 = require("./utils");
const naming_1 = require("./naming");
const external_docs_1 = require("../external-docs");
const utils_2 = require("@openapi-generator-plus/utils");
function toCodegenMapSchema(apiSchema, naming, suggestedValueModelName, suggestedValueModelScope, state) {
    const vendorExtensions = (0, vendor_extensions_1.toCodegenVendorExtensions)(apiSchema);
    const keyNativeType = state.generator.toNativeType({
        type: 'string',
        schemaType: types_1.CodegenSchemaType.STRING,
        vendorExtensions,
    });
    let additionalProperties = apiSchema.additionalProperties;
    if (additionalProperties === true) {
        additionalProperties = { type: 'string' };
    }
    else if (typeof additionalProperties === 'object') {
        if (Object.keys(additionalProperties).length === 0) {
            /* Handle an empty object */
            additionalProperties = { type: 'string' };
        }
    }
    else {
        throw new Error(`Invalid additionalProperties value: ${(0, utils_2.debugStringify)(additionalProperties)}`);
    }
    const componentSchemaUsage = (0, index_1.toCodegenSchemaUsage)(additionalProperties, state, {
        required: true,
        suggestedName: suggestedValueModelName,
        purpose: types_1.CodegenSchemaPurpose.MAP_VALUE,
        suggestedScope: suggestedValueModelScope,
    });
    const nativeType = state.generator.toNativeMapType({
        type: apiSchema.type,
        format: apiSchema.format,
        schemaType: types_1.CodegenSchemaType.MAP,
        keyNativeType,
        componentNativeType: componentSchemaUsage.nativeType,
        vendorExtensions,
    });
    const result = Object.assign(Object.assign(Object.assign(Object.assign({}, (0, naming_1.extractNaming)(naming)), { type: 'object', format: apiSchema.format || null, schemaType: types_1.CodegenSchemaType.MAP, component: componentSchemaUsage, nativeType }), (0, utils_1.extractCodegenSchemaCommon)(apiSchema, state)), { vendorExtensions, externalDocs: (0, external_docs_1.toCodegenExternalDocs)(apiSchema), maxProperties: apiSchema.maxProperties || null, minProperties: apiSchema.minProperties || null });
    return result;
}
exports.toCodegenMapSchema = toCodegenMapSchema;
