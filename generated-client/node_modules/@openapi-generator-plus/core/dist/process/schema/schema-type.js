"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toCodegenSchemaTypeFromApiSchema = exports.toCodegenSchemaType = void 0;
const types_1 = require("@openapi-generator-plus/types");
const utils_1 = require("@openapi-generator-plus/utils");
function toCodegenSchemaType(type, format) {
    if (type === 'object') {
        return types_1.CodegenSchemaType.OBJECT;
    }
    else if (type === 'array') {
        return types_1.CodegenSchemaType.ARRAY;
    }
    else if (type === 'boolean') {
        return types_1.CodegenSchemaType.BOOLEAN;
    }
    else if (type === 'number') {
        return types_1.CodegenSchemaType.NUMBER;
    }
    else if (type === 'integer') {
        return types_1.CodegenSchemaType.INTEGER;
    }
    else if (type === 'string' && format === 'date-time') {
        return types_1.CodegenSchemaType.DATETIME;
    }
    else if (type === 'string' && format === 'date') {
        return types_1.CodegenSchemaType.DATE;
    }
    else if (type === 'string' && format === 'time') {
        return types_1.CodegenSchemaType.TIME;
    }
    else if (type === 'string' && format === 'binary') {
        return types_1.CodegenSchemaType.BINARY;
    }
    else if (type === 'string') {
        return types_1.CodegenSchemaType.STRING;
    }
    else if (type === 'file') {
        return types_1.CodegenSchemaType.BINARY;
    }
    else {
        throw new Error(`Unsupported schema type: ${type}`);
    }
}
exports.toCodegenSchemaType = toCodegenSchemaType;
function toCodegenSchemaTypeFromApiSchema(apiSchema) {
    if (apiSchema.allOf) {
        return types_1.CodegenSchemaType.ALLOF;
    }
    else if (apiSchema.anyOf) {
        return types_1.CodegenSchemaType.ANYOF;
    }
    else if (apiSchema.oneOf) {
        return types_1.CodegenSchemaType.ONEOF;
    }
    else if (apiSchema.enum && apiSchema.type !== 'boolean') { /* Not sure which types should support enums, but boolean shouldn't - Jackson doesn't support them in its implementation */
        return types_1.CodegenSchemaType.ENUM;
    }
    else if (apiSchema.type === 'object' && apiSchema.additionalProperties && (!apiSchema.properties || Object.keys(apiSchema.properties).length === 0)) {
        return types_1.CodegenSchemaType.MAP;
    }
    else if (typeof apiSchema.type === 'string') {
        return toCodegenSchemaType(apiSchema.type, apiSchema.format);
    }
    else if (apiSchema.type === undefined) {
        throw new Error(`Missing schema type: ${(0, utils_1.debugStringify)(apiSchema)}`);
    }
    else {
        throw new Error(`Invalid schema type "${apiSchema.type}": ${(0, utils_1.debugStringify)(apiSchema)}`);
    }
}
exports.toCodegenSchemaTypeFromApiSchema = toCodegenSchemaTypeFromApiSchema;
