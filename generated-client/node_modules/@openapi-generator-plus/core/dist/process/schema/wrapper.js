"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createWrapperSchemaUsage = void 0;
const types_1 = require("@openapi-generator-plus/types");
const openapi_type_guards_1 = require("../../openapi-type-guards");
const utils_1 = require("../utils");
const naming_1 = require("./naming");
const property_1 = require("./property");
const utils_2 = require("./utils");
function createWrapperSchemaUsage(suggestedName, scope, wrap, wrapApi, state) {
    const $ref = (0, openapi_type_guards_1.isOpenAPIReferenceObject)(wrapApi) ? wrapApi.$ref : undefined;
    const naming = (0, naming_1.toUniqueScopedName)($ref, `${suggestedName}_wrapper`, scope, wrapApi, types_1.CodegenSchemaType.WRAPPER, state);
    const property = (0, property_1.createCodegenProperty)('value', wrap, state);
    property.required = true;
    property.nullable = wrap.nullable;
    const nativeType = state.generator.toNativeObjectType({
        type: 'object',
        schemaType: types_1.CodegenSchemaType.WRAPPER,
        scopedName: naming.scopedName,
        vendorExtensions: null,
    });
    const schema = Object.assign(Object.assign({}, (0, naming_1.extractNaming)(naming)), { type: 'object', format: null, schemaType: types_1.CodegenSchemaType.WRAPPER, property, implements: null, description: null, title: null, vendorExtensions: null, externalDocs: null, nullable: false, readOnly: false, writeOnly: false, deprecated: false, nativeType, component: null, schemas: null, parents: null, children: null });
    (0, utils_2.addToScope)(schema, scope, state);
    (0, naming_1.usedSchemaName)(naming.scopedName, state);
    return Object.assign(Object.assign({}, (0, utils_1.extractCodegenSchemaUsage)(wrap)), { schema });
}
exports.createWrapperSchemaUsage = createWrapperSchemaUsage;
