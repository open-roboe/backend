import { CodegenHierarchySchema, CodegenInterfaceSchema, CodegenObjectSchema, CodegenSchemaPurpose, CodegenScope } from '@openapi-generator-plus/types';
import { InternalCodegenState } from '../../types';
import { OpenAPIX } from '../../types/patches';
import { ScopedModelInfo } from './naming';
export declare function toCodegenObjectSchema(apiSchema: OpenAPIX.SchemaObject, naming: ScopedModelInfo, state: InternalCodegenState): CodegenObjectSchema | CodegenInterfaceSchema | CodegenHierarchySchema;
/**
 * Create a new schema of an object type with the given name, in the given scope, and add it to that scope.
 * @param suggestedName the suggested name to use, but a unique name will be chosen in that scope
 * @param scope the scope in which to create the object, or `null` to create in the global scope
 * @param state
 * @returns
 */
export declare function createObjectSchema(suggestedName: string, scope: CodegenScope | null, purpose: CodegenSchemaPurpose, state: InternalCodegenState): CodegenObjectSchema;
