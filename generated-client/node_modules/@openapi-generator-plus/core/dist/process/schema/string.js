"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createStringSchemaUsage = exports.toCodegenStringSchema = void 0;
const types_1 = require("@openapi-generator-plus/types");
const external_docs_1 = require("../external-docs");
const utils_1 = require("../utils");
const vendor_extensions_1 = require("../vendor-extensions");
const naming_1 = require("./naming");
const schema_type_1 = require("./schema-type");
const usage_1 = require("./usage");
const utils_2 = require("./utils");
function toCodegenStringSchema(apiSchema, naming, state) {
    if (apiSchema.type !== 'string') {
        throw new Error('Not a string schema');
    }
    const format = apiSchema.format;
    const schemaType = (0, schema_type_1.toCodegenSchemaType)(apiSchema.type, format);
    if (schemaType !== types_1.CodegenSchemaType.STRING && schemaType !== types_1.CodegenSchemaType.DATE && schemaType !== types_1.CodegenSchemaType.DATETIME && schemaType !== types_1.CodegenSchemaType.TIME) {
        throw new Error(`Unsupported string schema type: ${schemaType}`);
    }
    const vendorExtensions = (0, vendor_extensions_1.toCodegenVendorExtensions)(apiSchema);
    const nativeType = state.generator.toNativeType({
        type: apiSchema.type,
        format,
        schemaType: types_1.CodegenSchemaType.STRING,
        vendorExtensions,
    });
    const result = Object.assign(Object.assign(Object.assign(Object.assign({}, (0, naming_1.extractNaming)(naming)), { type: apiSchema.type, format: format || null, schemaType,
        nativeType, component: null }), (0, utils_2.extractCodegenSchemaCommon)(apiSchema, state)), { vendorExtensions, externalDocs: (0, external_docs_1.toCodegenExternalDocs)(apiSchema), maxLength: (0, utils_1.convertToNumber)(apiSchema.maxLength), minLength: (0, utils_1.convertToNumber)(apiSchema.minLength), pattern: apiSchema.pattern || null });
    return result;
}
exports.toCodegenStringSchema = toCodegenStringSchema;
/**
 * Create a new schema usage of a string type.
 * @param state
 */
function createStringSchemaUsage(format, options, state) {
    const schema = toCodegenStringSchema({
        type: 'string',
        format,
    }, null, state);
    return (0, usage_1.createSchemaUsage)(schema, options, state);
}
exports.createStringSchemaUsage = createStringSchemaUsage;
