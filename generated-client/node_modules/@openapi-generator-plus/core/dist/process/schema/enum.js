"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.toCodegenEnumSchema = void 0;
const types_1 = require("@openapi-generator-plus/types");
const vendor_extensions_1 = require("../vendor-extensions");
const idx = __importStar(require("@openapi-generator-plus/indexed-type"));
const utils_1 = require("./utils");
const schema_type_1 = require("./schema-type");
const naming_1 = require("./naming");
const examples_1 = require("../examples");
const external_docs_1 = require("../external-docs");
const utils_2 = require("@openapi-generator-plus/utils");
function toCodegenEnumSchema(apiSchema, naming, state) {
    if (!apiSchema.enum) {
        throw new Error('Not an enum schema');
    }
    if (typeof apiSchema.type !== 'string') {
        throw new Error(`Invalid schema type for enum schema: ${apiSchema.type}: ${(0, utils_2.debugStringify)(apiSchema)}`);
    }
    const vendorExtensions = (0, vendor_extensions_1.toCodegenVendorExtensions)(apiSchema);
    if (!naming) {
        // TODO what does an enum look like if it doesn't have a name? can enums be inline in some languages?
        // perhaps in TypeScript that would mean our native type was a disjunction of our enum values?
        // so the generator needs to do that for us.
        // Perhaps that means we don't use toNativeObjectType, but instead a toNativeEnumType, that takes 
        // the enum values as well and can optionally use them to make a type literal?
        throw new Error('enum doesn\'t currently support not being named');
    }
    const nativeType = state.generator.toNativeObjectType({
        type: apiSchema.type,
        format: apiSchema.format,
        schemaType: types_1.CodegenSchemaType.ENUM,
        scopedName: naming.scopedName,
        vendorExtensions,
    });
    const enumValueType = apiSchema.type;
    const enumValueFormat = apiSchema.format;
    const enumValuePropertyType = (0, schema_type_1.toCodegenSchemaType)(enumValueType, enumValueFormat);
    const enumValueNativeType = state.generator.toNativeType({
        type: enumValueType,
        format: apiSchema.format,
        schemaType: enumValuePropertyType,
        vendorExtensions,
    });
    const enumValueLiteralOptions = {
        type: enumValueType,
        format: enumValueFormat,
        schemaType: enumValuePropertyType,
        nativeType: enumValueNativeType,
        component: null,
        required: true,
        nullable: false,
        readOnly: false,
        writeOnly: false,
    };
    const existingEnumValueNames = new Set();
    const enumValues = idx.create();
    apiSchema.enum.forEach(name => {
        const originalEnumMemberName = state.generator.toEnumMemberName(`${name}`);
        let uniqueName = originalEnumMemberName;
        let iterations = 1;
        while (existingEnumValueNames.has(uniqueName)) {
            uniqueName = state.generator.toEnumMemberName(`${originalEnumMemberName}_${iterations}`);
            iterations += 1;
        }
        existingEnumValueNames.add(uniqueName);
        const literalValue = state.generator.toLiteral(`${name}`, enumValueLiteralOptions);
        if (!literalValue) {
            state.log(types_1.CodegenLogLevel.WARN, `Cannot format literal for enum value "${name}" in ${(0, utils_2.debugStringify)(apiSchema)}`);
            return;
        }
        idx.set(enumValues, `${name}`, {
            name: uniqueName,
            literalValue,
            value: `${name}`,
        });
    });
    const result = Object.assign(Object.assign(Object.assign(Object.assign({}, (0, naming_1.extractNaming)(naming)), { type: apiSchema.type, format: apiSchema.format || null, schemaType: types_1.CodegenSchemaType.ENUM, component: null, nativeType }), (0, utils_1.extractCodegenSchemaCommon)(apiSchema, state)), { vendorExtensions, externalDocs: (0, external_docs_1.toCodegenExternalDocs)(apiSchema), enumValueNativeType,
        enumValues, examples: null });
    result.examples = (0, examples_1.toCodegenExamples)(apiSchema.example, undefined, undefined, result, state);
    return result;
}
exports.toCodegenEnumSchema = toCodegenEnumSchema;
