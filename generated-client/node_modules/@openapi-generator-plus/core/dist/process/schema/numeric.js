"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toCodegenNumericSchema = void 0;
const types_1 = require("@openapi-generator-plus/types");
const external_docs_1 = require("../external-docs");
const utils_1 = require("../utils");
const vendor_extensions_1 = require("../vendor-extensions");
const naming_1 = require("./naming");
const schema_type_1 = require("./schema-type");
const utils_2 = require("./utils");
function toCodegenNumericSchema(apiSchema, naming, state) {
    if (apiSchema.type !== 'number' && apiSchema.type !== 'integer') {
        throw new Error('Not a numeric schema');
    }
    const schemaType = (0, schema_type_1.toCodegenSchemaType)(apiSchema.type, apiSchema.format);
    if (schemaType !== types_1.CodegenSchemaType.NUMBER && schemaType !== types_1.CodegenSchemaType.INTEGER) {
        throw new Error(`Unsupported numeric schema type: ${schemaType}`);
    }
    const vendorExtensions = (0, vendor_extensions_1.toCodegenVendorExtensions)(apiSchema);
    const nativeType = state.generator.toNativeType({
        type: apiSchema.type,
        format: apiSchema.format,
        schemaType,
        vendorExtensions,
    });
    const result = Object.assign(Object.assign(Object.assign(Object.assign({}, (0, naming_1.extractNaming)(naming)), { type: apiSchema.type, format: apiSchema.format || null, schemaType,
        nativeType, component: null }), (0, utils_2.extractCodegenSchemaCommon)(apiSchema, state)), { vendorExtensions, externalDocs: (0, external_docs_1.toCodegenExternalDocs)(apiSchema), maximum: (0, utils_1.convertToNumber)(apiSchema.maximum), exclusiveMaximum: (0, utils_1.convertToBoolean)(apiSchema.exclusiveMaximum, null), minimum: (0, utils_1.convertToNumber)(apiSchema.minimum), exclusiveMinimum: (0, utils_1.convertToBoolean)(apiSchema.exclusiveMinimum, null), multipleOf: (0, utils_1.convertToNumber)(apiSchema.multipleOf) });
    return result;
}
exports.toCodegenNumericSchema = toCodegenNumericSchema;
