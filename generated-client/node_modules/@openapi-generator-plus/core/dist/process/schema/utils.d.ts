import { CodegenAllOfSchema, CodegenAnyOfSchema, CodegenDiscriminatableSchema, CodegenHierarchySchema, CodegenInterfaceSchema, CodegenNamedSchema, CodegenObjectLikeSchemas, CodegenObjectSchema, CodegenOneOfSchema, CodegenProperty, CodegenSchema, CodegenScope, CodegenWrapperSchema } from '@openapi-generator-plus/types';
import { InternalCodegenState } from '../../types';
import { OpenAPIX } from '../../types/patches';
import { ScopedModelInfo } from './naming';
import { OpenAPI } from 'openapi-types';
/**
 * Extract the common attributes that we use from OpenAPI schema in our CodegenSchema.
 * @param apiSchema an OpenAPI schema
 * @param state
 */
export declare function extractCodegenSchemaCommon(apiSchema: OpenAPIX.SchemaObject, state: InternalCodegenState): Pick<CodegenSchema, 'description' | 'title' | 'readOnly' | 'nullable' | 'writeOnly' | 'deprecated'>;
export declare function addToScope(schema: CodegenSchema, scope: CodegenScope | null, state: InternalCodegenState): void;
/**
 * Returns the scope of the given schema
 * @param schema
 * @param state
 * @returns a CodegenScope, or null if it is in the global scope
 */
export declare function scopeOf(schema: CodegenNamedSchema, state: InternalCodegenState): CodegenScope | null;
export declare function findKnownSchema(apiSchema: OpenAPIX.SchemaObject, $ref: string | undefined, state: InternalCodegenState): CodegenSchema | undefined;
/**
 * Add the result to the knownSchemas to avoid generating again, and returns the canonical schema.
 * If theres already a known schema for the given schema, the already existing version is returned.
 * This helps to dedupe what we generate.
 */
export declare function addToKnownSchemas<T extends CodegenSchema>(apiSchema: OpenAPIX.SchemaObject, schema: T, naming: ScopedModelInfo | null, state: InternalCodegenState): T;
/**
 * Returns the interface, if any, that the property in the given schema implements in one of the interfaces the schema implements.
 * @param schema
 * @param serializedName
 * @returns
 */
export declare function interfaceForProperty(schema: CodegenObjectLikeSchemas, serializedName: string): CodegenInterfaceSchema | undefined;
/**
 * Finds and removes the named property from the given set of properties.
 * @param properties the properties to look in
 * @param serializedName the serialized name of the property
 * @returns a CodegenProperty or undefined if not found
 */
export declare function removeProperty(schema: CodegenObjectLikeSchemas, serializedName: string): CodegenProperty | undefined;
export declare function findProperty(schema: CodegenObjectLikeSchemas, serializedName: string): CodegenProperty | undefined;
/**
 * Looks for the named property in the current schema and any parents etc.
 * @param schema
 * @param serializedName
 * @returns
 */
export declare function findPropertyAndSchema(schema: CodegenObjectLikeSchemas, serializedName: string): [CodegenProperty, CodegenSchema] | [undefined, undefined];
export declare function addChildObjectSchema(parent: CodegenObjectSchema, child: CodegenObjectSchema): void;
export declare function addChildInterfaceSchema(parent: CodegenInterfaceSchema, child: CodegenInterfaceSchema): void;
export declare function addImplementor(parent: CodegenInterfaceSchema, child: CodegenObjectSchema | CodegenAllOfSchema | CodegenAnyOfSchema | CodegenOneOfSchema | CodegenWrapperSchema): void;
export declare function addReservedSchemaName(schemaName: string, state: InternalCodegenState): void;
export declare function reservedSchemaName($ref: string | undefined, state: InternalCodegenState): string | undefined;
/**
 * Returns the value of the `$ref` to use to refer to the given schema definition / component.
 * @param schemaName the name of a schema
 * @param state
 */
export declare function refForSchemaName(schemaName: string, state: InternalCodegenState): string;
/**
 * Returns the value of the `$ref` to use to refer to the given schema in an external document.
 * @param path the path to the external schema
 * @param doc the external schema document
 * @param schemaName the name of the schema
 * @param state
 * @returns
 */
export declare function refForPathAndSchemaName(path: string, doc: OpenAPI.Document, schemaName: string, state: InternalCodegenState): string;
export declare function baseSuggestedNameForRelatedSchemas(schema: CodegenObjectSchema | CodegenHierarchySchema | CodegenDiscriminatableSchema): string;
export declare function baseSuggestedNameForRelatedSchemas(schema: CodegenSchema): string | null;
