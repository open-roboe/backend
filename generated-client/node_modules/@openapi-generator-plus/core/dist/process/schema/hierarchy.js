"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toCodegenHierarchySchema = void 0;
const types_1 = require("@openapi-generator-plus/types");
const openapi_type_guards_1 = require("../../openapi-type-guards");
const vendor_extensions_1 = require("../vendor-extensions");
const naming_1 = require("./naming");
const utils_1 = require("./utils");
const examples_1 = require("../examples");
const discriminator_1 = require("./discriminator");
const property_1 = require("./property");
const external_docs_1 = require("../external-docs");
const interface_1 = require("./interface");
function toCodegenHierarchySchema(apiSchema, naming, state) {
    const { scopedName, scope } = naming;
    const vendorExtensions = (0, vendor_extensions_1.toCodegenVendorExtensions)(apiSchema);
    const nativeType = state.generator.toNativeObjectType({
        type: 'object',
        schemaType: types_1.CodegenSchemaType.HIERARCHY,
        scopedName,
        vendorExtensions,
    });
    let result = Object.assign(Object.assign(Object.assign({}, (0, naming_1.extractNaming)(naming)), (0, utils_1.extractCodegenSchemaCommon)(apiSchema, state)), { discriminator: null, discriminatorValues: null, polymorphic: true, vendorExtensions, externalDocs: (0, external_docs_1.toCodegenExternalDocs)(apiSchema), nativeType, type: 'hierarchy', format: null, schemaType: types_1.CodegenSchemaType.HIERARCHY, component: null, deprecated: false, examples: null, schemas: null, properties: null, additionalProperties: null, parents: null, interface: null, composes: [], implements: null });
    result.examples = (0, examples_1.toCodegenExamples)(apiSchema.example, undefined, undefined, result, state);
    if ((0, openapi_type_guards_1.isOpenAPIv3SchemaObject)(apiSchema, state.specVersion)) {
        result.deprecated = apiSchema.deprecated || false;
    }
    /* Must add model to knownSchemas here before we try to load other models to avoid infinite loop
       when a model references other models that in turn reference this model.
     */
    result = (0, utils_1.addToKnownSchemas)(apiSchema, result, naming, state);
    result.properties = (0, property_1.toCodegenProperties)(apiSchema, result, state) || null;
    result.interface = (0, interface_1.toCodegenInterfaceSchema)(result, scope, state);
    /* Process discriminator after adding composes so they can be used */
    result.discriminator = (0, discriminator_1.toCodegenSchemaDiscriminator)(apiSchema, result, state);
    (0, discriminator_1.loadDiscriminatorMappings)(result, state);
    (0, discriminator_1.discoverDiscriminatorReferencesInOtherDocuments)(apiSchema, state);
    return result;
}
exports.toCodegenHierarchySchema = toCodegenHierarchySchema;
