import { CodegenDiscriminatableSchema, CodegenDiscriminator, CodegenDiscriminatorSchema, CodegenSchema, CodegenSchemaUsage } from '@openapi-generator-plus/types';
import { InternalCodegenState } from '../../types';
import { OpenAPIX } from '../../types/patches';
/**
 * Create a CodegenDiscriminator for the given schema, to be put into the target
 * @param apiSchema the schema containing the discriminator
 * @param target the CodegenDiscriminatorSchema where the discriminator will go
 * @param state
 * @returns
 */
export declare function toCodegenSchemaDiscriminator(apiSchema: OpenAPIX.SchemaObject, target: CodegenDiscriminatorSchema, state: InternalCodegenState): CodegenDiscriminator | null;
/**
 * Make sure we load any models referenced by the discriminator, as they may not be
 * in our components/schemas that we load automatically, such as when they're in external
 * documents.
 *
 * NOTE: this is separated from toCodegenSchemaDiscriminator as we must not load additional schemas
 *       until the schema has its own discriminator set, otherwise we will not be able to find and add
 *       new schemas to the discriminator.
 */
export declare function loadDiscriminatorMappings(schema: CodegenDiscriminatorSchema, state: InternalCodegenState): void;
/**
 * Add a new member to the discriminator in the discriminatorSchema.
 * @param discriminatorSchema
 * @param memberSchema
 * @param state
 * @returns
 */
export declare function addToDiscriminator(discriminatorSchema: CodegenDiscriminatorSchema, memberSchema: CodegenDiscriminatableSchema, state: InternalCodegenState): void;
/**
 * Find any discriminators in the parent, and add the target to those discriminators
 * @param parent
 * @param target
 * @param state
 */
export declare function addToAnyDiscriminators(parent: CodegenSchema, target: CodegenDiscriminatableSchema, state: InternalCodegenState): void;
/**
 * Post-process schemas to remove discriminator properties from objects. We don't remove the discriminator
 * properties earlier, as we need to keep them while we're reconciling all of the discriminators, and members,
 * as we try to find the discriminator property.
 * @param schema
 * @returns
 */
export declare function postProcessSchemaForDiscriminator(schema: CodegenSchema): void;
/**
 * Find schemas in other documents (not the root, which are all discovered automatically) that should be members of the discriminator
 * of the given schema, so that we find all such schemas that may exist in referenced docs. Otherwise we don't end up discovering and
 * outputting those schemas if they're not directly referenced.
 * @param discriminatorApiSchema
 * @param state
 * @returns
 */
export declare function discoverDiscriminatorReferencesInOtherDocuments(discriminatorApiSchema: OpenAPIX.SchemaObject, state: InternalCodegenState): CodegenSchemaUsage<CodegenSchema>[];
