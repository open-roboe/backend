import { InternalCodegenState } from '../types';
import { OpenAPIV2, OpenAPIV3, OpenAPIV3_1 } from 'openapi-types';
import { CodegenDefaultValueOptions, CodegenInitialValueOptions, CodegenLiteralValueOptions, CodegenSchema, CodegenSchemaInfo, CodegenSchemaUsage, CodegenValue } from '@openapi-generator-plus/types';
/**
 * Resolve anything that may also be a ReferenceObject to the base type.
 * @param ob
 * @param state
 */
export declare function resolveReference<T>(ob: T | OpenAPIV3_1.ReferenceObject | OpenAPIV3.ReferenceObject | OpenAPIV2.ReferenceObject, state: InternalCodegenState): T;
export declare function equalCodegenTypeInfo(a: CodegenSchema | CodegenSchemaUsage, b: CodegenSchema | CodegenSchemaUsage): boolean;
export declare function typeInfoToString(a: CodegenSchema | CodegenSchemaUsage): string;
/**
 * Extract _just_ the CodegenSchemaUsage properties from the source.
 */
export declare function extractCodegenSchemaInfo(source: CodegenSchemaInfo): CodegenSchemaInfo;
export declare function extractCodegenSchemaUsage(source: CodegenSchemaUsage): CodegenSchemaUsage;
export declare function coalesce<T>(...values: (T | undefined)[]): T | undefined;
/**
 * Convert a `$ref` into a name that could be turned into a type.
 * @param $ref
 */
export declare function nameFromRef($ref: string, state: InternalCodegenState): string;
/**
 * Convert any value to a boolean.
 * Parsing a schema sometimes results in a 'yes' or a 'no' when a boolean is expected.
 * @param value any value
 * @returns
 */
export declare function convertToBoolean(value: unknown, defaultValue: boolean): boolean;
export declare function convertToBoolean(value: unknown, defaultValue: null): boolean | null;
export declare function convertToBoolean(value: unknown): boolean | undefined;
export declare function convertToNumber(value: unknown): number | null;
/**
 * Process a default value from the API schema into our default value type.
 * @param value
 * @param schemaUsage
 * @param state
 * @returns
 */
export declare function toDefaultValue(value: unknown, schemaUsage: CodegenSchemaUsage, state: InternalCodegenState): CodegenValue | null;
export declare function toCodegenDefaultValueOptions(usage: CodegenSchemaUsage): CodegenDefaultValueOptions;
export declare function toCodegenLiteralValueOptions(usage: CodegenSchemaUsage): CodegenLiteralValueOptions;
export declare function toCodegenInitialValueOptions(usage: CodegenSchemaUsage): CodegenInitialValueOptions;
