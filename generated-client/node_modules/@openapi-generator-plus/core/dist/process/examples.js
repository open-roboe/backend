"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.toCodegenExamples = void 0;
const types_1 = require("@openapi-generator-plus/types");
const idx = __importStar(require("@openapi-generator-plus/indexed-type"));
const openapi_type_guards_1 = require("../openapi-type-guards");
const media_types_1 = require("./media-types");
const utils_1 = require("../utils");
const utils_2 = require("@openapi-generator-plus/utils");
const utils_3 = require("./utils");
function canFormatExampleValueAsLiteral(schema) {
    return schema.schemaType !== types_1.CodegenSchemaType.OBJECT;
}
function exampleValue(value, mediaType, schema, state) {
    const valueLiteral = canFormatExampleValueAsLiteral(schema) ? state.generator.toLiteral(value, Object.assign({ required: true }, schema)) : state.generator.toLiteral(null, Object.assign({ required: true }, schema));
    const valueString = toCodegenExampleValueString(value, mediaType, state);
    if (valueLiteral === null || valueString === null) {
        state.log(types_1.CodegenLogLevel.WARN, `Cannot format literal for example ${(0, utils_2.debugStringify)(value)} in ${(0, utils_2.debugStringify)(schema)}`);
        return null;
    }
    return {
        value,
        valueLiteral,
        valueString,
        valuePretty: toCodegenExampleValuePretty(value),
    };
}
function toCodegenExample(example, mediaType, schema, state) {
    const value = exampleValue(example, mediaType, schema, state);
    if (value === null) {
        return null;
    }
    return Object.assign(Object.assign({ name: null, summary: null, description: null }, value), { mediaType: mediaType ? (0, media_types_1.toCodegenMediaType)(mediaType) : null });
}
function toCodegenExamples(apiExample, examples, mediaType, schema, state) {
    if ((0, types_1.isCodegenSchemaUsage)(schema)) {
        schema = schema.schema;
    }
    if (apiExample) {
        const example = toCodegenExample(apiExample, mediaType, schema, state);
        if (example !== null) {
            return idx.create([
                ['default', example],
            ]);
        }
        else {
            return null;
        }
    }
    if (!examples) {
        return null;
    }
    const result = idx.create();
    for (const mediaTypeOrName in examples) {
        const apiExample = (0, utils_3.resolveReference)(examples[mediaTypeOrName], state);
        if ((0, openapi_type_guards_1.isOpenAPIV2ExampleObject)(apiExample, state.specVersion)) {
            const example = exampleValue(apiExample, mediaTypeOrName, schema, state);
            if (example !== null) {
                idx.set(result, mediaTypeOrName, Object.assign({ name: null, summary: null, description: null, mediaType: (0, media_types_1.toCodegenMediaType)(mediaTypeOrName) }, example));
            }
        }
        else if ((0, openapi_type_guards_1.isOpenAPIV3ExampleObject)(apiExample, state.specVersion)) {
            const value = apiExample.value || apiExample.externalValue; // TODO handle externalValue
            const example = exampleValue(value, mediaType, schema, state);
            if (example) {
                idx.set(result, mediaTypeOrName, Object.assign({ name: mediaTypeOrName, mediaType: mediaType ? (0, media_types_1.toCodegenMediaType)(mediaType) : null, description: apiExample.description || null, summary: apiExample.summary || null }, example));
            }
        }
        else {
            throw new Error(`Unsupported spec version: ${state.specVersion}`);
        }
    }
    return idx.nullIfEmpty(result);
}
exports.toCodegenExamples = toCodegenExamples;
function toCodegenExampleValueString(value, mediaType, state) {
    if (typeof value === 'string') {
        return state.generator.toLiteral(value, (0, utils_1.stringLiteralValueOptions)(state.generator));
    }
    else {
        // TODO we're assuming that we're transforming an object to JSON, which is appropriate is the mediaType is JSON
        const stringValue = JSON.stringify(value);
        return state.generator.toLiteral(stringValue, (0, utils_1.stringLiteralValueOptions)(state.generator));
    }
}
function toCodegenExampleValuePretty(value) {
    if (typeof value === 'string') {
        return value;
    }
    else if (value === undefined) {
        return 'undefined';
    }
    else if (value === null) {
        return 'null';
    }
    else {
        // TODO we're assuming that we're transforming an object to JSON, which is appropriate is the mediaType is JSON
        return JSON.stringify(value, undefined, 4);
    }
}
