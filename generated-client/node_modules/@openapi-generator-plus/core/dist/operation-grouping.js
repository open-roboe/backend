"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addToGroupsByTagOrPath = exports.addToGroupsByTag = exports.addToGroupsByPath = void 0;
function prepareOperationForGroup(operation, group) {
    if (group.path !== '') {
        if (operation.path === group.path) {
            operation.path = '';
        }
        else if (operation.path.startsWith(`${group.path}/`)) {
            operation.path = operation.path.substring(group.path.length);
        }
        else {
            /* The operation path isn't compatible, so convert the group to not specify a common path */
            for (const otherOperation of group.operations) {
                otherOperation.path = `${group.path}${otherOperation.path}`;
            }
            group.path = '';
        }
    }
}
function addToGroups(operation, groupName, groupPath, groups, state) {
    groupName = state.generator.toOperationGroupName(groupName);
    let group = groups[groupName];
    if (!group) {
        group = {
            name: groupName,
            path: groupPath,
            operations: [],
            consumes: [],
            produces: [], // TODO in OpenAPIV2 these are on the document, but not on OpenAPIV3
        };
        groups[groupName] = group;
    }
    prepareOperationForGroup(operation, group);
    group.operations.push(operation);
}
/**
 * See JavaJAXRSSpecServerCodegen.addOperationToGroup
 * @param operation
 * @param apiInfo
 */
function addToGroupsByPath(operation, groups, state) {
    let basePath = operation.path;
    const pos = basePath.indexOf('/', 1);
    if (pos > 0) {
        basePath = basePath.substring(0, pos);
    }
    let groupName = basePath;
    if (groupName.startsWith('/')) {
        groupName = groupName.substring(1);
    }
    if (groupName === '') {
        groupName = 'default';
    }
    addToGroups(operation, groupName, basePath, groups, state);
}
exports.addToGroupsByPath = addToGroupsByPath;
function addToGroupsByTag(operation, groups, state) {
    let groupName;
    if (operation.tags && operation.tags.length) {
        groupName = operation.tags[0];
    }
    else {
        groupName = 'default';
    }
    addToGroups(operation, groupName, '', groups, state);
}
exports.addToGroupsByTag = addToGroupsByTag;
function addToGroupsByTagOrPath(operation, groups, state) {
    if (operation.vendorExtensions && operation.vendorExtensions['x-group']) {
        return addToGroups(operation, String(operation.vendorExtensions['x-group']), '', groups, state);
    }
    else if (operation.tags && operation.tags.length) {
        return addToGroupsByTag(operation, groups, state);
    }
    else {
        return addToGroupsByPath(operation, groups, state);
    }
}
exports.addToGroupsByTagOrPath = addToGroupsByTagOrPath;
