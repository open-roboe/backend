"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.uniquePropertiesIncludingInheritedForParents = exports.uniquePropertiesIncludingInherited = void 0;
const idx = __importStar(require("@openapi-generator-plus/indexed-type"));
/**
 * Return all of the unique properties, including inherited properties, for a model, where properties
 * in submodels override any same-named properties in parent models.
 * @param schema
 * @param result
 */
function uniquePropertiesIncludingInherited(schema, result = idx.create()) {
    if (schema.parents) {
        for (const aParent of schema.parents) {
            uniquePropertiesIncludingInherited(aParent, result);
        }
    }
    if (schema.properties) {
        idx.merge(result, schema.properties);
    }
    return result;
}
exports.uniquePropertiesIncludingInherited = uniquePropertiesIncludingInherited;
/**
 * Return an object containing all of the unique properties, including inherited properties, for an array of parent schemas, where properties
 * in child schemas override any same-named properties in parent schemas.
 * @param schemas
 * @param result
 */
function uniquePropertiesIncludingInheritedForParents(schemas) {
    const schemaProperties = schemas.map(schema => uniquePropertiesIncludingInherited(schema));
    const result = idx.create();
    for (const properties of schemaProperties) {
        idx.merge(result, properties);
    }
    return result;
}
exports.uniquePropertiesIncludingInheritedForParents = uniquePropertiesIncludingInheritedForParents;
