import Handlebars from 'handlebars';
import { CodegenGeneratorContext } from '@openapi-generator-plus/types';
declare type UnknownObject = Record<string, unknown>;
/**
 * Load all Handlebars (*.hbs) templates from the given directory as partials.
 * @param templateDirPath path to template dir
 * @param hbs Handlebars instance
 */
export declare function loadTemplates(templateDirPath: string, hbs: typeof Handlebars, prefix?: string): Promise<void>;
/**
 * Emit a file
 * @param templateName The name of the template partial to use as the root of the output
 * @param outputPath The path of the file to output to
 * @param context The context object for the template to use
 * @param replace Whether to replace an existing file if one exists
 * @param hbs Handlebars instance
 */
export declare function emit(templateName: string, outputPath: string, context: UnknownObject, replace: boolean, hbs: typeof Handlebars): Promise<void>;
export interface ActualHelperOptions extends Handlebars.HelperOptions {
    name: string;
    loc: {
        start: hbs.AST.Position;
        end: hbs.AST.Position;
    };
    lookupProperty: (object: unknown, propertyName: string) => unknown;
}
/**
 * Return the current source position as a string
 * @param options the Handlebars helper options
 */
export declare function sourcePosition(options: ActualHelperOptions): string;
export declare function registerStandardHelpers(hbs: typeof Handlebars, { generator, log, utils }: CodegenGeneratorContext): void;
export {};
