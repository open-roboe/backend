openapi: 3.0.2
info:
  description: |2

    ### backend server for the roboapp, connecting roboe with the android clients
  title: roboe backend
  version: 0.0.1
servers:
- url: /
paths:
  /api/account/:
    get:
      description: "Returns account info, requires authentication"
      operationId: get_logged_user_api_account__get
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: Successful Response
      security:
      - OAuth2PasswordBearer: []
      summary: Get Logged User
      tags:
      - account
      x-accepts: application/json
  /api/account/admin:
    get:
      description: |-
        Returns account info, requires authentication in an admin account.
        Used to test if the current account is admin
      operationId: get_logged_admin_user_api_account_admin_get
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: Successful Response
      security:
      - OAuth2PasswordBearer: []
      summary: Get Logged Admin User
      tags:
      - account
      x-accepts: application/json
  /api/account/super_admin:
    get:
      description: |-
        Returns account info, requires authentication in a super admin account.
        Used to test if the current account is super admin
      operationId: get_logged_super_admin_user_api_account_super_admin_get
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: Successful Response
      security:
      - OAuth2PasswordBearer: []
      summary: Get Logged Super Admin User
      tags:
      - account
      x-accepts: application/json
  /api/account/register:
    post:
      description: |-
        TODO: require super admin permissions

        Register a new user. Requires authentication in a super admin account
      operationId: register_api_account_register_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Register
      tags:
      - account
      x-content-type: application/json
      x-accepts: application/json
  /api/account/auth:
    post:
      operationId: login_api_account_auth_post
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Body_login_api_account_auth_post'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Login
      tags:
      - account
      x-content-type: application/x-www-form-urlencoded
      x-accepts: application/json
  /api/course/:
    get:
      description: get all courses
      operationId: get_all_courses_api_course__get
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Course'
                title: Response Get All Courses Api Course  Get
                type: array
          description: Successful Response
      security:
      - OAuth2PasswordBearer: []
      summary: Get All Courses
      tags:
      - course
      x-accepts: application/json
    post:
      description: Add a course
      operationId: add_course_api_course__post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Add Course
      tags:
      - course
      x-content-type: application/json
      x-accepts: application/json
  /api/course/marker:
    delete:
      description: delete a marker
      operationId: delete_marker_api_course_marker_delete
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: Successful Response
      security:
      - OAuth2PasswordBearer: []
      summary: Delete Marker
      tags:
      - course
      x-accepts: application/json
    post:
      description: |-
        create a new marker for the specified course
        ideas: uuid, lat, lon, color
      operationId: create_marker_api_course_marker_post
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: Successful Response
      security:
      - OAuth2PasswordBearer: []
      summary: Create Marker
      tags:
      - course
      x-accepts: application/json
    put:
      description: update a marker
      operationId: update_marker_api_course_marker_put
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: Successful Response
      security:
      - OAuth2PasswordBearer: []
      summary: Update Marker
      tags:
      - course
      x-accepts: application/json
  /api/course/marker/assign_roboa:
    post:
      description: assign specified roboa to specified marker
      operationId: marker_assign_roboa_api_course_marker_assign_roboa_post
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: Successful Response
      security:
      - OAuth2PasswordBearer: []
      summary: Marker Assign Roboa
      tags:
      - course
      x-accepts: application/json
  /api/course/join_course:
    post:
      description: assign current logged user to specified course
      operationId: join_course_api_course_join_course_post
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: Successful Response
      security:
      - OAuth2PasswordBearer: []
      summary: Join Course
      tags:
      - course
      x-accepts: application/json
  /api/polling/roboa:
    post:
      description: "Polling endpoint, called repeatedly by an authenticated roboa\
        \ to send its metrics, and receive back commands"
      operationId: poll_roboa_update_api_polling_roboa_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PollRoboaUpdate'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Poll Roboa Update
      tags:
      - polling
      x-content-type: application/json
      x-accepts: application/json
  /api/polling/user:
    post:
      description: |-
        Polling endpoint, called repeatedly by an authenticated user to send its metrics
        and get data updates
      operationId: poll_user_update_api_polling_user_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PollUserUpdate'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PollResponse'
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Poll User Update
      tags:
      - polling
      x-content-type: application/json
      x-accepts: application/json
  /api/polling/:
    get:
      description: |-
        Polling endpoint, called repeatedly by an authenticated user to get data updates.
        This endpoint does not update user metrics
      operationId: poll_api_polling__get
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PollResponse'
          description: Successful Response
      security:
      - OAuth2PasswordBearer: []
      summary: Poll
      tags:
      - polling
      x-accepts: application/json
components:
  schemas:
    AuthToken:
      example:
        access_token: access_token
        token_type: token_type
      properties:
        access_token:
          title: Access Token
          type: string
        token_type:
          title: Token Type
          type: string
      required:
      - access_token
      - token_type
      title: AuthToken
      type: object
    Body_login_api_account_auth_post:
      properties:
        grant_type:
          pattern: password
          title: Grant Type
          type: string
        username:
          title: Username
          type: string
        password:
          title: Password
          type: string
        scope:
          default: ""
          title: Scope
          type: string
        client_id:
          title: Client Id
          type: string
        client_secret:
          title: Client Secret
          type: string
      required:
      - password
      - username
      title: Body_login_api_account_auth_post
      type: object
    Course:
      example:
        data: data
        name: name
      properties:
        name:
          title: Name
          type: string
        data:
          default: ""
          title: Data
          type: string
      required:
      - name
      title: Course
      type: object
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          title: Detail
          type: array
      title: HTTPValidationError
      type: object
    PollResponse:
      example:
        courses:
        - data: data
          name: name
        - data: data
          name: name
        users:
        - course_id: course_id
          super_admin: false
          last_update: 0
          admin: true
          lon: 1.4658129805029452
          lat: 6.027456183070403
          username: username
        - course_id: course_id
          super_admin: false
          last_update: 0
          admin: true
          lon: 1.4658129805029452
          lat: 6.027456183070403
          username: username
        roboas:
        - course_id: course_id
          last_update: 0
          name: name
          lon: 1.4658129805029452
          lat: 6.027456183070403
        - course_id: course_id
          last_update: 0
          name: name
          lon: 1.4658129805029452
          lat: 6.027456183070403
      properties:
        courses:
          items:
            $ref: '#/components/schemas/Course'
          title: Courses
          type: array
        users:
          items:
            $ref: '#/components/schemas/UserResponse'
          title: Users
          type: array
        roboas:
          items:
            $ref: '#/components/schemas/RoboaResponse'
          title: Roboas
          type: array
      required:
      - courses
      - roboas
      - users
      title: PollResponse
      type: object
    PollRoboaUpdate:
      example:
        lon: 6.027456183070403
        lat: 0.8008281904610115
      properties:
        lat:
          title: Lat
          type: number
        lon:
          title: Lon
          type: number
      required:
      - lat
      - lon
      title: PollRoboaUpdate
      type: object
    PollUserUpdate:
      example:
        lon: 6.027456183070403
        lat: 0.8008281904610115
      properties:
        lat:
          title: Lat
          type: number
        lon:
          title: Lon
          type: number
      required:
      - lat
      - lon
      title: PollUserUpdate
      type: object
    RoboaResponse:
      example:
        course_id: course_id
        last_update: 0
        name: name
        lon: 1.4658129805029452
        lat: 6.027456183070403
      properties:
        name:
          title: Name
          type: string
        last_update:
          title: Last Update
          type: integer
        lat:
          default: 0
          title: Lat
          type: number
        lon:
          default: 0
          title: Lon
          type: number
        course_id:
          title: Course Id
          type: string
      required:
      - last_update
      - name
      title: RoboaResponse
      type: object
    UserCreate:
      example:
        password: password
        super_admin: false
        admin: false
        username: username
      properties:
        username:
          title: Username
          type: string
        password:
          title: Password
          type: string
        admin:
          default: false
          title: Admin
          type: boolean
        super_admin:
          default: false
          title: Super Admin
          type: boolean
      required:
      - password
      - username
      title: UserCreate
      type: object
    UserResponse:
      example:
        course_id: course_id
        super_admin: false
        last_update: 0
        admin: true
        lon: 1.4658129805029452
        lat: 6.027456183070403
        username: username
      properties:
        username:
          title: Username
          type: string
        admin:
          default: true
          title: Admin
          type: boolean
        super_admin:
          default: false
          title: Super Admin
          type: boolean
        last_update:
          title: Last Update
          type: integer
        lat:
          default: 0
          title: Lat
          type: number
        lon:
          default: 0
          title: Lon
          type: number
        course_id:
          title: Course Id
          type: string
      required:
      - last_update
      - username
      title: UserResponse
      type: object
    ValidationError:
      properties:
        loc:
          items:
            type: string
          title: Location
          type: array
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string
      required:
      - loc
      - msg
      - type
      title: ValidationError
      type: object
  securitySchemes:
    OAuth2PasswordBearer:
      flows:
        password:
          scopes: {}
          tokenUrl: /api/account/auth
      type: oauth2

